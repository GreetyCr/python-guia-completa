========================================================================
               GU√çA DE INSTALACI√ìN DE PYTHON
========================================================================

Esta gu√≠a te ayudar√° a instalar Python y configurar tu entorno de desarrollo.

------------------------------------------------------------------------
1. INSTALACI√ìN DE PYTHON
------------------------------------------------------------------------

== WINDOWS ==

1. Visita https://www.python.org/downloads/
2. Descarga la √∫ltima versi√≥n estable (recomendado Python 3.10 o superior)
3. Ejecuta el instalador descargado
4. IMPORTANTE: Marca la casilla "Add Python to PATH"
5. Selecciona "Install Now" para una instalaci√≥n est√°ndar
6. Una vez finalizada la instalaci√≥n, verifica que Python se haya instalado correctamente:
   - Abre CMD o PowerShell
   - Escribe: python --version
   - Deber√≠as ver algo como "Python 3.11.0"

== macOS ==

1. Opci√≥n A: Usando Homebrew (recomendado)
   - Instala Homebrew si no lo tienes: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   - Instala Python: brew install python3

2. Opci√≥n B: Instalador oficial
   - Visita https://www.python.org/downloads/
   - Descarga la √∫ltima versi√≥n estable para macOS
   - Ejecuta el instalador y sigue las instrucciones

3. Verifica la instalaci√≥n:
   - Abre Terminal
   - Escribe: python3 --version

== LINUX ==

1. La mayor√≠a de distribuciones Linux ya vienen con Python preinstalado.
   Verifica si ya lo tienes:
   - Abre Terminal
   - Escribe: python3 --version

2. Si no est√° instalado:
   - Ubuntu/Debian: sudo apt update && sudo apt install python3 python3-pip
   - Fedora: sudo dnf install python3 python3-pip
   - Arch: sudo pacman -S python python-pip

------------------------------------------------------------------------
2. ENTORNOS VIRTUALES
------------------------------------------------------------------------

Los entornos virtuales son esenciales para mantener diferentes proyectos con sus
propias dependencias aisladas.

== Creaci√≥n y uso de entornos virtuales ==

1. Instalar la herramienta virtualenv (si no est√° instalada):
   pip install virtualenv

2. Crear un nuevo entorno virtual:
   - Windows: python -m venv nombre_entorno
   - macOS/Linux: python3 -m venv nombre_entorno

3. Activar el entorno virtual:
   - Windows (cmd): nombre_entorno\Scripts\activate
   - Windows (PowerShell): .\nombre_entorno\Scripts\Activate.ps1
   - macOS/Linux: source nombre_entorno/bin/activate

4. Para desactivar el entorno: deactivate

== Alternativa: Conda ==

Conda es una alternativa popular, especialmente √∫til para proyectos de ciencia de datos:

1. Instala Miniconda desde: https://docs.conda.io/en/latest/miniconda.html

2. Crear un entorno con Conda:
   conda create --name nombre_entorno python=3.10

3. Activar entorno:
   conda activate nombre_entorno

4. Desactivar:
   conda deactivate

------------------------------------------------------------------------
3. GESTOR DE PAQUETES PIP
------------------------------------------------------------------------

Pip es el gestor de paquetes est√°ndar de Python.

== Comandos b√°sicos de pip ==

1. Instalar un paquete:
   pip install nombre_paquete

2. Instalar una versi√≥n espec√≠fica:
   pip install nombre_paquete==1.0.0

3. Actualizar un paquete:
   pip install --upgrade nombre_paquete

4. Desinstalar un paquete:
   pip uninstall nombre_paquete

5. Listar paquetes instalados:
   pip list

6. Guardar dependencias en un archivo:
   pip freeze > requirements.txt

7. Instalar dependencias desde un archivo:
   pip install -r requirements.txt

------------------------------------------------------------------------
4. EDITORES DE C√ìDIGO Y IDEs
------------------------------------------------------------------------

Hay muchas opciones para desarrollar en Python:

1. Visual Studio Code (VSCode)
   - Ligero, extensible y gratuito
   - Instala la extensi√≥n "Python" de Microsoft
   - Soporte para debugging, linting, autocompletado
   - Descarga: https://code.visualstudio.com/

2. PyCharm
   - IDE profesional para Python (versi√≥n Community gratuita)
   - Funcionalidades avanzadas de refactorizaci√≥n y navegaci√≥n de c√≥digo
   - Integraci√≥n directa con frameworks populares
   - Descarga: https://www.jetbrains.com/pycharm/

3. Jupyter Notebook
   - Ideal para ciencia de datos y exploraci√≥n
   - Instalaci√≥n: pip install notebook
   - Iniciar: jupyter notebook

4. Spyder
   - Dise√±ado para trabajo cient√≠fico
   - Similar a MATLAB/RStudio
   - Viene incluido en Anaconda

------------------------------------------------------------------------
5. ESTRUCTURA B√ÅSICA DE PROYECTO
------------------------------------------------------------------------

Un proyecto de Python bien organizado suele tener esta estructura:

mi_proyecto/
‚îÇ
‚îú‚îÄ‚îÄ README.md                # Documentaci√≥n del proyecto
‚îú‚îÄ‚îÄ LICENSE                  # Licencia del proyecto
‚îú‚îÄ‚îÄ setup.py                 # Configuraci√≥n para distribuir el proyecto
‚îú‚îÄ‚îÄ requirements.txt         # Dependencias del proyecto
‚îÇ
‚îú‚îÄ‚îÄ mi_paquete/              # C√≥digo fuente principal
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py          # Hace que el directorio sea un paquete
‚îÇ   ‚îú‚îÄ‚îÄ modulo1.py
‚îÇ   ‚îî‚îÄ‚îÄ modulo2.py
‚îÇ
‚îú‚îÄ‚îÄ tests/                   # Pruebas unitarias
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ test_modulo1.py
‚îÇ   ‚îî‚îÄ‚îÄ test_modulo2.py
‚îÇ
‚îî‚îÄ‚îÄ docs/                    # Documentaci√≥n adicional
    ‚îî‚îÄ‚îÄ ...

------------------------------------------------------------------------
6. CONCEPTOS B√ÅSICOS DE PYTHON
------------------------------------------------------------------------

== Comentarios ==
# Comentario de una l√≠nea

"""
Comentario
de m√∫ltiples
l√≠neas (docstring)
"""

== Convenciones de nombres ==
- variables_y_funciones: snake_case (min√∫sculas con guiones bajos)
- CONSTANTES: MAY√öSCULAS_CON_GUIONES_BAJOS
- ClasesYExcepciones: PascalCase (CapWords)
- _variable_interna: comienza con guion bajo para uso interno
- __variable_privada: comienza con doble guion bajo (name mangling)

== PEP 8 ==
PEP 8 es la gu√≠a de estilo oficial para c√≥digo Python: https://pep8.org/

Principales recomendaciones:
- Usa 4 espacios para indentaci√≥n (no tabuladores)
- Limita l√≠neas a 79 caracteres
- Usa l√≠neas en blanco para separar funciones y clases
- Imports en l√≠neas separadas y agrupados
- Evita espacios en blanco innecesarios

== Zen de Python ==
El Zen de Python es un conjunto de 19 aforismos que resumen la filosof√≠a de Python.
Para verlo, escribe en el int√©rprete de Python:

>>> import this

------------------------------------------------------------------------
7. RECURSOS DE APRENDIZAJE
------------------------------------------------------------------------

== Documentaci√≥n oficial ==
- Python.org: https://docs.python.org/3/
- Tutorial oficial: https://docs.python.org/3/tutorial/

== Libros recomendados ==
- "Python Crash Course" por Eric Matthes
- "Automate the Boring Stuff with Python" por Al Sweigart
- "Fluent Python" por Luciano Ramalho (avanzado)

== Cursos online ==
- Coursera: "Python for Everybody" por Dr. Charles Severance
- edX: "Introduction to Computer Science and Programming Using Python" del MIT
- Codecademy: "Learn Python 3"
- Real Python: https://realpython.com/

== Sitios interactivos ==
- Kaggle: https://www.kaggle.com/learn/python
- HackerRank: https://www.hackerrank.com/domains/python
- LeetCode: https://leetcode.com/problemset/

------------------------------------------------------------------------
CONSEJOS FINALES
------------------------------------------------------------------------

1. Practica regularmente, la programaci√≥n se aprende programando.
2. Trabaja en proyectos personales para aplicar lo aprendido.
3. No tengas miedo de consultar la documentaci√≥n y buscar ayuda.
4. Participa en comunidades como Stack Overflow, Reddit (r/learnpython).
5. Revisa c√≥digo de otros y contribuye a proyectos de c√≥digo abierto.
6. Usa herramientas de calidad de c√≥digo como flake8, pylint o black.
7. Escribe pruebas unitarias para tu c√≥digo desde el principio.

¬°Buena suerte en tu viaje con Python! üêç